// Generated by CoffeeScript 1.6.2
(function() {
  var app, broadcast, express, http, i, list, port, server, sockets, todoList, webSocketServer, wss, _,
    _this = this;

  webSocketServer = (require('ws')).Server;

  http = require('http');

  express = require('express');

  todoList = require('./todoList');

  _ = require('underscore');

  app = express();

  list = new todoList();

  app.use(express["static"](__dirname + "/public"));

  server = http.createServer(app);

  port = 4000;

  server.listen(port);

  wss = new webSocketServer({
    server: server
  });

  sockets = [];

  i = 0;

  wss.on("connection", function(sock) {
    sock.send(JSON.stringify({
      type: 'init',
      todos: list.generateJSON()
    }));
    sock.num = i;
    sockets[i++] = sock;
    sock.on("message", function(message) {
      var data, id, newItem;

      message = JSON.parse(message);
      if (message.type === "uncomplete") {
        list["switch"](parseInt(message.id, null), false);
        return broadcast(JSON.stringify({
          type: "uncomplete",
          id: message.id,
          isChecked: false
        }));
      } else if (message.type === "complete") {
        list["switch"](parseInt(message.id, null), true);
        return broadcast(JSON.stringify({
          type: "complete",
          id: message.id,
          isChecked: true
        }));
      } else if (message.type === "delete") {
        id = parseInt(message.id, null);
        list.remove(list.getByID(id));
        return broadcast(JSON.stringify({
          type: "delete",
          id: id
        }));
      } else if (message.type === "new") {
        data = message.text;
        newItem = list.add(data);
        return broadcast(JSON.stringify({
          type: "new",
          text: newItem.data()
        }));
      }
    });
    return sock.on("close", function() {
      return sockets[sock.num] = null;
    });
  });

  broadcast = function(command) {
    var error;

    try {
      return _.each(sockets, function(s) {
        if (s !== null) {
          return s.send(command);
        }
      });
    } catch (_error) {
      error = _error;
      return console.log(error);
    }
  };

}).call(this);
