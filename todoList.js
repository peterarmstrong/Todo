// Generated by CoffeeScript 1.6.2
(function() {
  var fs, node, todoList, _;

  node = require('./todoItem');

  fs = require('fs');

  _ = require('underscore');

  todoList = (function() {
    todoList.incomplete = null;

    todoList.incompleteTail = null;

    todoList.complete = null;

    function todoList() {
      this.load();
    }

    todoList.prototype.add = function(descr, id, finished) {
      var newItem;

      newItem = null;
      switch (arguments.length) {
        case 1:
          newItem = new node(descr);
          break;
        case 3:
          newItem = new node(descr, id, finished);
      }
      if (newItem == null) {
        return;
      }
      if (!newItem.isFinished) {
        if (this.incomplete == null) {
          this.incomplete = newItem;
          this.incompleteTail = newItem;
          if (this.complete) {
            this.incompleteTail.next = this.complete;
          }
        } else {
          newItem.next = this.incomplete;
          this.incomplete = newItem;
        }
      } else {
        if (this.complete == null) {
          this.complete = newItem;
        } else {
          newItem.next = this.complete;
          this.complete = newItem;
        }
        if ((this.incompleteTail != null)) {
          this.incompleteTail.next = this.complete;
        }
      }
      this.save();
      return newItem;
    };

    todoList.prototype.generateJSON = function() {
      var arr, i, temp;

      temp = this.incomplete ? this.incomplete : this.complete;
      i = 0;
      arr = [];
      while ((temp != null)) {
        arr[i++] = temp.data();
        temp = temp.next;
      }
      return arr;
    };

    todoList.prototype.print = function() {
      var temp, _results;

      temp = this.incomplete ? this.incomplete : this.complete;
      _results = [];
      while ((temp != null)) {
        console.log(temp.info());
        _results.push(temp = temp.next);
      }
      return _results;
    };

    todoList.prototype.getByID = function(ID) {
      var temp;

      temp = this.incomplete ? this.incomplete : this.complete;
      while ((temp != null)) {
        if (temp.ID === ID) {
          return temp;
        }
        temp = temp.next;
      }
      return null;
    };

    todoList.prototype.remove = function(temp) {
      var iter;

      if (temp == null) {
        return null;
      }
      if (temp === this.incomplete && temp === this.incompleteTail) {
        this.incomplete = null;
        this.incompleteTail = null;
      } else if (temp === this.incomplete) {
        this.incomplete = temp.next;
      } else if (temp === this.complete) {
        this.complete = temp.next;
        if ((this.incompleteTail != null)) {
          this.incompleteTail.next = this.complete;
        }
      } else {
        iter = this.incomplete ? this.incomplete : this.complete;
        while ((iter != null)) {
          if (iter.next === temp) {
            break;
          }
          iter = iter.next;
        }
        if (iter !== null) {
          iter.next = temp.next;
        }
        if (temp === this.incompleteTail) {
          this.incompleteTail = iter;
          this.incompleteTail.next = this.complete;
        }
      }
      return this.save();
    };

    todoList.prototype["switch"] = function(ID, complete) {
      var temp;

      temp = this.getByID(ID);
      if (temp == null) {
        return;
      }
      if (temp.isFinished === complete) {
        return;
      }
      this.remove(temp);
      temp.isFinished = !temp.isFinished;
      return this.add(temp.description, temp.ID, temp.isFinished);
    };

    todoList.prototype.save = function() {
      var data, temp;

      data = "";
      if ((this.incompleteTail == null) && (this.incomplete == null) && (this.complete == null)) {
        fs.unlink('log', function() {});
        return;
      }
      temp = this.incomplete ? this.incomplete : this.complete;
      while ((temp != null)) {
        data += JSON.stringify(temp.data()) + '\n';
        temp = temp.next;
      }
      return fs.writeFile('log', data, function() {});
    };

    todoList.prototype.load = function() {
      var _this = this;

      return fs.readFile('log', 'utf-8', function(err, data) {
        var lines;

        if (err) {
          if (err.code === 'ENOENT') {
            return;
          } else {
            throw err;
          }
        }
        lines = data.trim().split('\n');
        return _.each(lines.reverse(), function(line) {
          var elements;

          if (line.trim() !== "") {
            elements = JSON.parse(line);
            if (elements.length === 3) {
              return _this.add(elements[1], elements[0], elements[2]);
            }
          }
        });
      });
    };

    return todoList;

  })();

  module.exports = todoList;

}).call(this);
